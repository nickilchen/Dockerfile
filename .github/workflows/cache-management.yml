name: 🚀 Build Performance and Cache Management

on:
  # 手动触发缓存管理
  workflow_dispatch:
    inputs:
      action:
        description: 'Cache management action'
        required: true
        default: 'warm-cache'
        type: choice
        options:
          - warm-cache
          - clear-cache
          - analyze-cache
          - benchmark-build
      platform:
        description: 'Target platform for cache warming'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

  # 定时缓存预热（每周日凌晨）
  schedule:
    - cron: '0 2 * * 0'

  # 主分支推送时进行缓存分析
  push:
    branches:
      - main
    paths:
      - 'gdal/Dockerfile'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/gdal-multi-arch
  GDAL_VERSION: "3.7.1"
  JAVA_VERSION: "8"

jobs:
  # 缓存预热
  warm-cache:
    name: 🔥 Warm Build Cache
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.action == 'warm-cache')
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: 🔥 Warm cache for ${{ matrix.platform }}
        uses: docker/build-push-action@v5
        with:
          context: ./gdal
          file: ./gdal/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          cache-from: type=gha,scope=cache-warm-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=cache-warm-${{ matrix.platform }}
          build-args: |
            GDAL_VERSION=${{ env.GDAL_VERSION }}
            BUILDKIT_INLINE_CACHE=1

      - name: 📊 Cache warming summary
        run: |
          echo "✅ Cache warmed for platform: ${{ matrix.platform }}"
          echo "🔑 Cache scope: cache-warm-${{ matrix.platform }}"

  # 缓存清理
  clear-cache:
    name: 🧹 Clear Build Cache
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'clear-cache'
    permissions:
      actions: write
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧹 Clear GitHub Actions cache
        run: |
          echo "🧹 Clearing GitHub Actions cache..."
          
          # 获取所有缓存
          CACHES=$(gh api repos/${{ github.repository }}/actions/caches --paginate | jq -r '.actions_caches[].key')
          
          if [[ -z "$CACHES" ]]; then
            echo "📋 No caches found to clear"
            exit 0
          fi
          
          echo "📋 Found caches to clear:"
          echo "$CACHES"
          
          # 删除所有缓存
          echo "$CACHES" | while read -r cache_key; do
            if [[ -n "$cache_key" ]]; then
              echo "🗑️ Deleting cache: $cache_key"
              gh api repos/${{ github.repository }}/actions/caches \
                --method DELETE \
                --field key="$cache_key" || echo "⚠️ Failed to delete $cache_key"
            fi
          done
          
          echo "✅ Cache clearing completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 缓存分析
  analyze-cache:
    name: 📊 Analyze Cache Performance
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'analyze-cache' || github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 📊 Analyze cache usage
        run: |
          echo "📊 Analyzing cache performance..."
          
          # 获取缓存信息
          gh api repos/${{ github.repository }}/actions/caches --paginate > cache_info.json
          
          echo "## 📊 Cache Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 总缓存数量和大小
          TOTAL_CACHES=$(jq '.actions_caches | length' cache_info.json)
          TOTAL_SIZE=$(jq '[.actions_caches[].size_in_bytes] | add' cache_info.json)
          TOTAL_SIZE_MB=$((TOTAL_SIZE / 1024 / 1024))
          
          echo "### 📈 缓存统计" >> $GITHUB_STEP_SUMMARY
          echo "- **总缓存数量**: $TOTAL_CACHES" >> $GITHUB_STEP_SUMMARY
          echo "- **总大小**: ${TOTAL_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 按类型分组的缓存
          echo "### 🏷️ 缓存类型分布" >> $GITHUB_STEP_SUMMARY
          jq -r '.actions_caches[] | .key' cache_info.json | sed 's/-.*$//' | sort | uniq -c | \
          while read count prefix; do
            echo "- **${prefix}**: ${count} 个缓存" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 最近使用的缓存
          echo "### 🕒 最近使用的缓存" >> $GITHUB_STEP_SUMMARY
          jq -r '.actions_caches[] | select(.last_accessed_at != null) | "\(.key) - \(.last_accessed_at)"' cache_info.json | \
          head -10 | while read line; do
            echo "- $line" >> $GITHUB_STEP_SUMMARY
          done
          
          # 缓存优化建议
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💡 优化建议" >> $GITHUB_STEP_SUMMARY
          
          if [[ $TOTAL_CACHES -gt 50 ]]; then
            echo "- ⚠️ 缓存数量较多，建议定期清理未使用的缓存" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ $TOTAL_SIZE_MB -gt 2000 ]]; then
            echo "- ⚠️ 缓存大小较大，建议优化Dockerfile以减少层数" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- ✅ 定期运行缓存预热以提高构建速度" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 监控缓存命中率和构建时间" >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建性能基准测试
  benchmark-build:
    name: ⚡ Build Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'benchmark-build'
    
    strategy:
      matrix:
        cache-mode: [no-cache, with-cache]
        platform: [linux/amd64, linux/arm64]
        
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ⚡ Benchmark build performance
        id: benchmark
        run: |
          PLATFORM="${{ matrix.platform }}"
          CACHE_MODE="${{ matrix.cache-mode }}"
          
          echo "🏁 Starting benchmark for $PLATFORM with $CACHE_MODE"
          
          # 构建参数
          BUILD_ARGS="--platform=$PLATFORM --file=./gdal/Dockerfile ./gdal"
          
          if [[ "$CACHE_MODE" == "with-cache" ]]; then
            BUILD_ARGS="$BUILD_ARGS --cache-from=type=gha,scope=benchmark-$PLATFORM"
            BUILD_ARGS="$BUILD_ARGS --cache-to=type=gha,mode=max,scope=benchmark-$PLATFORM"
          else
            BUILD_ARGS="$BUILD_ARGS --no-cache"
          fi
          
          # 记录开始时间
          START_TIME=$(date +%s)
          
          # 执行构建
          echo "🏗️ Building with: $BUILD_ARGS"
          docker buildx build $BUILD_ARGS --build-arg GDAL_VERSION=${{ env.GDAL_VERSION }}
          
          # 记录结束时间
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "cache-mode=$CACHE_MODE" >> $GITHUB_OUTPUT
          
          echo "✅ Build completed in ${DURATION} seconds"

      - name: 📊 Record benchmark results
        run: |
          DURATION="${{ steps.benchmark.outputs.duration }}"
          PLATFORM="${{ steps.benchmark.outputs.platform }}"
          CACHE_MODE="${{ steps.benchmark.outputs.cache-mode }}"
          
          # 创建结果文件
          echo "platform,cache_mode,duration_seconds,timestamp" > benchmark-result.csv
          echo "$PLATFORM,$CACHE_MODE,$DURATION,$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> benchmark-result.csv
          
          # 显示结果
          echo "## ⚡ 构建性能基准测试结果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 平台 | 缓存模式 | 构建时间 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| $PLATFORM | $CACHE_MODE | ${DURATION}s |" >> $GITHUB_STEP_SUMMARY

  # 性能监控报告
  performance-report:
    name: 📈 Performance Monitoring Report
    runs-on: ubuntu-latest
    needs: [benchmark-build]
    if: always() && github.event_name == 'workflow_dispatch' && inputs.action == 'benchmark-build'
    
    steps:
      - name: 📈 Generate performance report
        run: |
          echo "## 📈 构建性能监控报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 性能目标" >> $GITHUB_STEP_SUMMARY
          echo "- **AMD64构建时间** < 15分钟" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64构建时间** < 20分钟" >> $GITHUB_STEP_SUMMARY
          echo "- **缓存命中率** > 80%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 优化建议" >> $GITHUB_STEP_SUMMARY
          echo "1. 🚀 **使用多阶段构建**减少最终镜像大小" >> $GITHUB_STEP_SUMMARY
          echo "2. 📦 **优化依赖安装顺序**提高缓存命中率" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔄 **定期预热缓存**保持构建速度" >> $GITHUB_STEP_SUMMARY
          echo "4. 🧹 **清理无用缓存**节省存储空间" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 历史性能趋势" >> $GITHUB_STEP_SUMMARY
          echo "可以通过GitHub Actions的构建历史查看性能趋势。" >> $GITHUB_STEP_SUMMARY