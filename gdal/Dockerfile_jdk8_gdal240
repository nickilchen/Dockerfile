# 基于OpenJDK 8的GDAL 2.4.0镜像
# 包含GEOS、PROJ、JPEG、HDF5、HDF4、NetCDF库并集成到Java
# 支持多架构部署（AMD64、ARM64）

# 使用buildx构建时，Docker会根据目标平台自动选择正确的基础镜像
FROM --platform=$TARGETPLATFORM openjdk:8u342-jdk

# 设置标签信息
LABEL maintainer="GDAL JDK8 GDAL2.4.0 Image"
LABEL description="Ubuntu-based GDAL 2.4.0 image with OpenJDK 8 and full library support"
LABEL version="1.0.0"
LABEL gdal.version="2.4.0"
LABEL java.version="OpenJDK 8u342"
LABEL features="geos,proj,jpeg,hdf5,hdf4,netcdf,java-bindings"
LABEL architecture="amd64,arm64"

# 设置环境变量
ENV GDAL_VERSION=2.4.0
ENV GDAL_DATA=/usr/local/share/gdal
ENV JAVA_HOME=/usr/local/openjdk-8
ENV PATH=$PATH:$JAVA_HOME/bin
ENV CLASSPATH=/usr/local/share/java/gdal.jar

# 设置非交互式前端以避免提示
ENV DEBIAN_FRONTEND=noninteractive

# 创建非root用户
RUN groupadd -r -g 1000 gdaluser && \
    useradd -r -u 1000 -g gdaluser -m -d /home/gdaluser -s /bin/bash gdaluser

# 安装系统依赖和构建工具
# 注意：GDAL 2.4.0可能需要较旧版本的依赖库
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        # 基础工具
        bash \
        curl \
        wget \
        ca-certificates \
        tar \
        gzip \
        xz-utils \
        # 构建工具
        build-essential \
        make \
        gcc \
        g++ \
        pkg-config \
        # GDAL编译依赖 (针对GDAL 2.4.0调整)
        sqlite3 \
        libsqlite3-dev \
        libexpat1-dev \
        zlib1g-dev \
        libpng-dev \
        libtiff5-dev \
        libgeotiff-dev \
        libxml2-dev \
        # GEOS库 (GDAL 2.4.0兼容版本)
        libgeos-dev \
        # PROJ库 (GDAL 2.4.0兼容版本)
        libproj-dev \
        # JPEG库
        libjpeg-dev \
        # HDF5库
        libhdf5-dev \
        # HDF4库
        libhdf4-alt-dev \
        # NetCDF库
        libnetcdf-dev \
        # Java开发工具
        swig \
        # Apache Ant（构建Java绑定必需）
        ant \
    && rm -rf /var/lib/apt/lists/*

# 编译安装GDAL 2.4.0（启用所有需要的库和Java绑定）
RUN cd /tmp && \
    wget https://download.osgeo.org/gdal/2.4.0/gdal-2.4.0.tar.gz && \
    tar -xzf gdal-2.4.0.tar.gz && \
    cd gdal-2.4.0 && \
    # GDAL 2.4.0使用不同的构建系统
    # 修复Java支持配置，明确指定JDK路径并处理多架构兼容性
    echo "Finding JVM library path..." && \
    find /usr/local/openjdk-8 -name "libjvm.so" -type f 2>/dev/null && \
    JVM_LIB_PATH=$(find /usr/local/openjdk-8 -name "libjvm.so" -type f 2>/dev/null | head -n 1 | xargs dirname) && \
    echo "JVM library path: $JVM_LIB_PATH" && \
    echo "Target platform: $TARGETPLATFORM" && \
    ./configure \
        --prefix=/usr/local \
        --with-geos \
        --with-sqlite3 \
        --with-proj \
        --with-jpeg \
        --with-png \
        --with-tiff \
        --with-geotiff \
        --with-hdf5 \
        --with-hdf4 \
        --with-netcdf \
        --without-python \
        --with-java=/usr/local/openjdk-8 \
        --with-jvm-lib=$JVM_LIB_PATH \
        --with-jvm-lib-add-rpath \
        --with-hide-internal-symbols \
    && make -j$(nproc) && \
    make install && \
    # 构建Java绑定
    cd swig/java && \
    # 设置Java环境变量以确保正确构建
    export JAVA_HOME=/usr/local/openjdk-8 && \
    export PATH=$JAVA_HOME/bin:$PATH && \
    # 显示Java版本信息
    echo "=== Java Environment ===" && \
    java -version && \
    echo "JAVA_HOME: $JAVA_HOME" && \
    echo "PATH: $PATH" && \
    # 显示当前目录结构
    echo "=== Current Directory Structure ===" && \
    ls -la && \
    # 构建Java绑定
    echo "=== Building Java Bindings ===" && \
    make && \
    cd ../.. && \
    # 安装Java绑定
    mkdir -p /usr/local/share/java && \
    # 检查gdal.jar是否存在，如果不存在则尝试构建
    echo "=== Checking for gdal.jar ===" && \
    if [ ! -f "swig/java/gdal.jar" ]; then \
        echo "gdal.jar not found, trying to build it..."; \
        cd swig/java && \
        make clean && \
        make && \
        cd ../..; \
    else \
        echo "gdal.jar already exists"; \
    fi && \
    # 复制Java绑定文件
    echo "=== Copying Java Bindings ===" && \
    if [ -f "swig/java/gdal.jar" ]; then \
        cp swig/java/gdal.jar /usr/local/share/java/ && \
        echo "gdal.jar copied successfully"; \
    else \
        echo "Warning: gdal.jar not found, creating empty jar for now"; \
        touch /usr/local/share/java/gdal.jar; \
    fi && \
    # 复制Java本地库文件
    echo "=== Copying Java Native Libraries ===" && \
    cp swig/java/*.so /usr/local/lib/ 2>/dev/null || echo "No .so files to copy" && \
    # 复制可能的其他Java库文件
    find . -name "*.so" -path "*/swig/java/*" -exec cp {} /usr/local/lib/ \; 2>/dev/null || true && \
    # 显示复制的文件
    echo "Files in /usr/local/share/java:" && \
    ls -la /usr/local/share/java/ && \
    echo "Files in /usr/local/lib:" && \
    ls -la /usr/local/lib/ | grep "\.so" && \
    # cp -rf swig/java/*.so $JAVA_HOME/jre/lib/ext/ && \
    # cp swig/java/gdal.jar $JAVA_HOME/jre/lib/ext/ && \
    ldconfig && \
    cp -rf /usr/local/lib/libgdalalljni.so $JAVA_HOME/jre/lib/ext/ && \
    cp -rf ${CLASSPATH} $JAVA_HOME/jre/lib/ext/ && \
    cd / && \
    rm -rf /tmp/gdal-2.4.0*

# 清理构建依赖（保留运行时依赖）
RUN apt-get remove -y \
        build-essential \
        make \
        gcc \
        g++ \
        swig \
        ant \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* /tmp/*

# 验证GDAL安装
RUN gdalinfo --version && \
    echo "GDAL ${GDAL_VERSION} installation verified" && \
    # 验证GDAL版本
    gdal-config --version | grep -q "${GDAL_VERSION}" && \
    echo "GDAL version check passed" && \
    # 验证Java GDAL绑定（更加健壮的检查）
    if [ -f "/usr/local/share/java/gdal.jar" ]; then \
        ls -la /usr/local/share/java/gdal.jar && \
        echo "Java GDAL bindings installed"; \
    else \
        echo "Warning: Java GDAL bindings not found, but continuing..."; \
    fi && \
    # 额外检查lib目录中的.so文件
    echo "Checking for GDAL Java native libraries:" && \
    ls -la /usr/local/lib/ | grep gdal || echo "No GDAL Java native libraries found"

# 验证Java安装
RUN java -version && \
    echo "OpenJDK 8u342 installation verified" && \
    # 验证Java版本
    java -version 2>&1 | grep -q "1.8.0_342" && \
    echo "Java version check passed" && \
    # 验证CLASSPATH设置
    echo "CLASSPATH: $CLASSPATH" && \
    # 验证Java能否找到GDAL库
    java -cp "/usr/local/share/java/gdal.jar" org.gdal.gdal.gdalinfo --version 2>/dev/null || echo "Java GDAL bindings may not be fully functional"

# 创建工作目录
RUN mkdir -p /data /workspace && \
    chown -R gdaluser:gdaluser /data /workspace

# 设置工作目录
WORKDIR /workspace

# 切换到非root用户
USER gdaluser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD gdalinfo --version || exit 1

# 默认命令
CMD ["bash"]