# 多阶段构建以达到最小空间占用
# 第一阶段：解压和清理JDK
FROM alpine:latest AS extractor

# 安装解压工具
RUN apk add --no-cache tar

# 复制JDK包并解压
COPY jdk-8u431-linux-x64.tar.gz /tmp/
RUN cd /tmp && \
    tar -xzf jdk-8u431-linux-x64.tar.gz && \
    mv jdk1.8.0_431 /opt/java/openjdk

# 清理不必要的文件以减小镜像大小
RUN rm -rf /opt/java/openjdk/man \
    /opt/java/openjdk/sample \
    /opt/java/openjdk/plugin \
    /opt/java/openjdk/bin/javaws \
    /opt/java/openjdk/bin/pack200 \
    /opt/java/openjdk/bin/unpack200 \
    /opt/java/openjdk/bin/rmid \
    /opt/java/openjdk/bin/rmiregistry \
    /opt/java/openjdk/bin/keytool \
    /opt/java/openjdk/bin/kinit \
    /opt/java/openjdk/bin/klist \
    /opt/java/openjdk/bin/ktab \
    /opt/java/openjdk/bin/policytool \
    /opt/java/openjdk/bin/servertool \
    /opt/java/openjdk/bin/tnameserv \
    /opt/java/openjdk/bin/jjs \
    /opt/java/openjdk/bin/jcontrol \
    /opt/java/openjdk/bin/jconsole \
    /opt/java/openjdk/bin/jvisualvm \
    /opt/java/openjdk/bin/jhat \
    /opt/java/openjdk/bin/jinfo \
    /opt/java/openjdk/bin/jmap \
    /opt/java/openjdk/bin/jps \
    /opt/java/openjdk/bin/jrunscript \
    /opt/java/openjdk/bin/jstack \
    /opt/java/openjdk/bin/jstat \
    /opt/java/openjdk/bin/jstatd \
    /opt/java/openjdk/bin/rmic \
    /opt/java/openjdk/bin/schemagen \
    /opt/java/openjdk/bin/wsgen \
    /opt/java/openjdk/bin/wsimport \
    /opt/java/openjdk/bin/xjc \
    /opt/java/openjdk/lib/src.zip \
    /opt/java/openjdk/lib/missioncontrol \
    /opt/java/openjdk/lib/visualvm \
    /opt/java/openjdk/lib/*javafx* \
    /opt/java/openjdk/lib/*jfx* \
    /opt/java/openjdk/lib/amd64/libdecora_sse.so \
    /opt/java/openjdk/lib/amd64/libprism_*.so \
    /opt/java/openjdk/lib/amd64/libfxplugins.so \
    /opt/java/openjdk/lib/amd64/libglass.so \
    /opt/java/openjdk/lib/amd64/libgstreamer-lite.so \
    /opt/java/openjdk/lib/amd64/libjavafx*.so \
    /opt/java/openjdk/lib/amd64/libjfx*.so \
    /opt/java/openjdk/lib/ext/jfxrt.jar \
    /opt/java/openjdk/lib/ext/nashorn.jar \
    /opt/java/openjdk/lib/ext/cldrdata.jar \
    /opt/java/openjdk/lib/ext/dnsns.jar \
    /opt/java/openjdk/lib/ext/localedata.jar \
    /opt/java/openjdk/lib/ext/sunec.jar \
    /opt/java/openjdk/lib/ext/sunjce_provider.jar \
    /opt/java/openjdk/lib/ext/sunpkcs11.jar \
    /opt/java/openjdk/lib/ext/zipfs.jar \
    /opt/java/openjdk/lib/javafx.properties \
    /opt/java/openjdk/lib/jfr.jar \
    /opt/java/openjdk/lib/jfr \
    /opt/java/openjdk/lib/oblique-fonts

# 第二阶段：创建最终镜像
FROM alpine:latest

# 设置标签信息
LABEL maintainer="Minimal JDK8 Image"
LABEL description="Minimal OpenJDK 8 image based on Alpine Linux with local JDK package"
LABEL version="1.0.0"
LABEL java.version="OpenJDK 8u431"

# 设置环境变量
ENV JAVA_HOME=/opt/java/openjdk
ENV PATH=$JAVA_HOME/bin:$PATH

# 安装必要的运行时依赖
RUN apk add --no-cache \
    bash \
    ca-certificates \
    tzdata \
    libc6-compat \
    && rm -rf /var/cache/apk/*

# 从第一阶段复制清理后的JDK
COPY --from=extractor /opt/java/openjdk $JAVA_HOME

# 创建非root用户
RUN addgroup -g 1000 javauser && \
    adduser -D -u 1000 -G javauser javauser

# 验证Java安装
RUN java -version && \
    echo "OpenJDK 8u431 installation verified"

# 创建工作目录
RUN mkdir -p /workspace && \
    chown -R javauser:javauser /workspace

# 设置工作目录
WORKDIR /workspace

# 切换到非root用户
USER javauser

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD java -version || exit 1

# 默认命令
CMD ["bash"]